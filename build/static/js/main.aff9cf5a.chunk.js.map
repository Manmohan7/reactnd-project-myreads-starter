{"version":3,"sources":["BooksAPI.js","ShelfChanger.js","Book.js","ListBooks.js","Search.js","BookShelf.js","Dashboard.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","update","book","shelf","fetch","concat","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","then","res","json","search","query","data","books","ShelfChanger","props","currentShelf","updateShelf","react_default","a","createElement","className","value","onChange","event","target","disabled","Book","_this$props","this","title","authors","imageURL","imageLinks","smallThumbnail","style","width","height","backgroundImage","src_ShelfChanger","newShelf","map","author","key","Component","ListBooks","src_Book","Search","state","searchedBooks","mapBookShelf","bookFromShelf","_this","allBooks","filter","b","length","setState","updateBooks","Promise","resolve","BooksAPI","error","_this2","addToShelf","_this$state","react_router_dom","to","type","placeholder","src_ListBooks","BookShelf","Dashboard","shelves","src_BookShelf","label","BooksApp","updatedBooks","newBook","index","findIndex","push","_this3","react_router","exact","path","render","src_Dashboard","src_Search","React","ReactDOM","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.aff9cf5a.chunk.js","sourcesContent":["\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  }).then(res => res.json())\n    .then(data => data.books)\n","import React from 'react';\nimport PropTypes from 'prop-types'\n\nfunction ShelfChanger(props) {\n  const { currentShelf, updateShelf } = props\n\n  return (\n    <div className=\"book-shelf-changer\">\n      <select value={currentShelf} onChange={(event) => updateShelf(event.target.value)}>\n        <option value=\"move\" disabled>Move to...</option>\n        <option value=\"currentlyReading\">Currently Reading</option>\n        <option value=\"wantToRead\">Want to Read</option>\n        <option value=\"read\">Read</option>\n        <option value=\"none\">None</option>\n      </select>\n    </div>\n  )\n}\n\nShelfChanger.propTypes = {\n  currentShelf: PropTypes.string.isRequired,\n  updateShelf: PropTypes.func.isRequired\n}\n\nexport default ShelfChanger","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ShelfChanger from './ShelfChanger';\n\nclass Book extends Component {\n  static propTypes = {\n    book: PropTypes.object.isRequired,\n    updateShelf: PropTypes.func.isRequired\n  }\n\n  render() {\n    const { book, updateShelf } = this.props\n    const title = book.title ? book.title : 'Title not available',\n      authors = book.authors ? book.authors : [],\n      shelf = book.shelf ? book.shelf : 'none',\n      imageURL = (book.imageLinks && book.imageLinks.smallThumbnail)\n        ? book.imageLinks.smallThumbnail\n        : '';\n\n    return (\n      <div className=\"book\">\n        <div className=\"book-top\">\n          <div\n            className=\"book-cover\"\n            style={{ width: 128, height: 193, backgroundImage: `url(${imageURL})` }}\n          />\n\n          <ShelfChanger\n            currentShelf={shelf}\n            updateShelf={(newShelf) => updateShelf(newShelf)}\n          />\n        </div>\n\n        <div className=\"book-title\">{title}</div>\n\n        {authors.map((author) => (\n          <div key={author} className=\"book-authors\">{author}</div>\n        ))}\n      </div>\n    )\n  }\n}\n\nexport default Book","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport Book from './Book'\n\nclass ListBooks extends Component {\n  static propTypes = {\n    books: PropTypes.array.isRequired,\n    updateShelf: PropTypes.func.isRequired\n  }\n\n  render() {\n    const { books, updateShelf } = this.props\n\n    return (\n      <div className=\"bookshelf-books\">\n        <ol className=\"books-grid\">\n          {books.map((book) => (\n            <li key={book.id}>\n              <Book book={book} updateShelf={(newShelf) => updateShelf(book, newShelf)} />\n            </li>\n          ))}\n        </ol>\n      </div>\n    )\n  }\n}\n\nexport default ListBooks","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport * as BooksAPI from './BooksAPI';\nimport ListBooks from './ListBooks';\nimport PropTypes from 'prop-types'\n\nclass Search extends Component {\n  static propTypes = {\n    allBooks: PropTypes.array.isRequired,\n    addToShelf: PropTypes.func.isRequired\n  }\n\n  state = {\n    query: '',\n    searchedBooks: []\n  }\n\n  mapBookShelf = (query, searchedBooks) => {\n    searchedBooks = searchedBooks.map((book) => {\n      let bookFromShelf = this.props.allBooks.filter((b) => b.id === book.id)\n      bookFromShelf.length\n        ? book.shelf = bookFromShelf[0].shelf\n        : book.shelf = 'none'\n\n      return book\n    })\n\n    if (this.state.query === query) {\n      this.setState(() => ({\n        searchedBooks\n      }))\n    }\n  }\n\n  updateBooks = (query) => {\n    this.setState(() => ({\n      query\n    }))\n\n    /**\n     * NOTE: Race condition handled\n     * by passing an empty promise\n     */\n\n    let newBooks = query === \"\"\n      ? Promise.resolve([])\n      : BooksAPI.search(query)\n\n    newBooks.then((books) => {\n      if (books.error) {\n        books = []\n      }\n\n      this.mapBookShelf(query, books)\n    })\n\n    /**\n     * NOTE: Another solution is to not call search API\n     * and simply pass empty array to ListBooks\n     */\n    /*\n    if (query !== \"\") {\n      BooksAPI.search\n        .then((books) => {\n          if (books.error) {\n            books = []\n          }\n\n          this.mapBookShelf(query, books)\n        })\n    }\n    */\n\n  }\n\n  render() {\n    const { addToShelf } = this.props\n    const { searchedBooks, query } = this.state\n\n    return (\n      <div className=\"search-books\">\n        <div className=\"search-books-bar\">\n          <Link to=\"/\">\n            <button className=\"close-search\">Close</button>\n          </Link>\n\n          <div className=\"search-books-input-wrapper\">\n            <input\n              type=\"text\"\n              placeholder=\"Search by title or author\"\n              value={query}\n              onChange={(event) => this.updateBooks(event.target.value)}\n            />\n\n          </div>\n        </div>\n        <div className=\"search-books-results\">\n          {\n            query === \"\"\n              ? (<p className=\"search-books-initial-msg\">Start searching by typing above</p>)\n              : searchedBooks.length\n                ? <ListBooks books={searchedBooks} updateShelf={(book, newShelf) => addToShelf(book, newShelf)} />\n                : (<p className=\"no-books-msg\">No books found!</p>)\n          }\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Search","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport ListBooks from './ListBooks'\n\nclass BookShelf extends Component {\n  static propTypes = {\n    title: PropTypes.string.isRequired,\n    shelf: PropTypes.string.isRequired,\n    books: PropTypes.array.isRequired\n  }\n\n  render() {\n    let { title, shelf, books, updateShelf } = this.props\n\n    // filter all books according to shelf\n    books = books.filter((book) => {\n      return book.shelf === shelf\n    })\n\n    return (\n      <div className=\"bookshelf\">\n        <h2 className=\"bookshelf-title\">{title}</h2>\n        {\n          books.length\n            ? (<ListBooks books={books} updateShelf={(book, newShelf) => updateShelf(book, newShelf)} />)\n            : (<p>No books on this shelf</p>)\n        }\n      </div>\n    )\n  }\n}\n\nexport default BookShelf","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport BookShelf from './BookShelf';\nimport PropTypes from 'prop-types';\n\nclass Dashboard extends Component {\n  static propTypes = {\n    allBooks: PropTypes.array.isRequired,\n    shelves: PropTypes.array.isRequired,\n    updateShelf: PropTypes.func.isRequired\n  }\n\n  render() {\n    const { allBooks, shelves, updateShelf } = this.props\n\n    return (\n      <div className=\"list-books\">\n        <div className=\"list-books-title\">\n          <h1>MyReads</h1>\n        </div>\n\n        <div className=\"list-books-content\">\n          <div>\n\n            {shelves.map((shelf) => (\n              <BookShelf\n                key={shelf.label}\n                title={shelf.title}\n                shelf={shelf.label}\n                books={allBooks}\n                updateShelf={(book, newShelf) => updateShelf(book, newShelf)}\n              />\n            ))}\n\n          </div>\n        </div>\n\n        <Link to=\"/search\" className=\"open-search\">\n          <button>Add a book</button>\n        </Link>\n\n      </div>\n    )\n  }\n}\n\nexport default Dashboard","import React from 'react'\nimport { Route } from 'react-router-dom'\nimport './App.css'\nimport Search from './Search'\nimport Dashboard from './Dashboard'\nimport * as BooksAPI from './BooksAPI'\n\nclass BooksApp extends React.Component {\n  state = {\n    allBooks: [],\n    shelves: [{\n      title: 'Currently Reading',\n      label: 'currentlyReading'\n    }, {\n      title: 'Want to Read',\n      label: 'wantToRead',\n    }, {\n      title: 'Read',\n      label: 'read'\n    }]\n  }\n\n  componentDidMount() {\n    BooksAPI.getAll()\n      .then((allBooks) => {\n        this.setState(() => ({\n          allBooks\n        }))\n      })\n  }\n\n  updateShelf = (book, newShelf) => {\n    let updatedBooks = this.state.allBooks.map((b) => {\n      if (b.id === book.id) {\n        b.shelf = newShelf\n      }\n      return b\n    })\n\n    this.setState(() => ({\n      allBooks: updatedBooks\n    }))\n\n    BooksAPI.update(book, newShelf)\n  }\n\n  addToShelf = (newBook, shelf) => {\n    let allBooks = this.state.allBooks,\n      index = allBooks.findIndex(book => book.id === newBook.id);\n\n    if(index > -1) {\n      allBooks[index].shelf = shelf;\n    } else {\n      newBook.shelf = shelf;\n      allBooks.push(newBook)\n    }\n\n    this.setState(() => ({\n      allBooks\n    }))\n\n    BooksAPI.update(newBook, shelf)\n  }\n\n  render() {\n    const { allBooks, shelves } = this.state\n\n    return (\n      <div className=\"app\">\n        <Route exact path=\"/\" render={() => (\n          <Dashboard\n            allBooks={allBooks}\n            shelves={shelves}\n            updateShelf={(book, shelf) => this.updateShelf(book, shelf)}\n          />\n        )} />\n\n        <Route path=\"/search\" render={() => (\n          <Search\n            allBooks={allBooks}\n            addToShelf={(book, shelf) => this.addToShelf(book, shelf)}\n          />\n        )} />\n      </div>\n    )\n  }\n}\n\nexport default BooksApp\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}